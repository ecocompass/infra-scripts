# core server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: core-server-deployment
spec:
  replicas: 4
  selector:
    matchLabels:
      app: core-server
  template:
    metadata:
      labels:
        app: core-server
    spec:
      containers:
      - name: core-server-container
        image: rahulsingh14jan95/maps:mapengine-docker-image-0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080

# api-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  api-server-deployment
spec:
  replicas: 4
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server-container
        image: anupalmishra/ecocompass-api-server:0.0.1
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          
# async consumer
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  async-consumer-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: async-consumer
  template:
    metadata:
      labels:
        app: async-consumer
    spec:
      containers:
      - name: async-consumer-container
        image: anupalmishra/ecocompass-async-consumer:0.0.1
        imagePullPolicy: Always

# test pod
---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod-1
spec:
  containers:
    - name: test-container-1
      image: ubuntu:22.04
      command: ["sleep", "infinity"]

---
# link api-server pods with core-server pods using service
apiVersion: v1
kind: Service
metadata:
  name: core-service
spec:
  type: ClusterIP
  selector:
    app: core-server
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080

# nodePort service to expose api-servers on public IP
---
apiVersion: v1
kind: Service
metadata:
  name: external-service
spec:
  type: NodePort
  selector:
    app: api-server
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080
      nodePort: 30000

# mongodb
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mongodb
spec:
  serviceName: "mongodb"
  replicas: 1  # Adjust as needed
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo
        ports:
        - containerPort: 27017

# mongodb service
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  clusterIP: None
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017

# rabbitmq
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rabbitmq
spec:
  replicas: 1
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers:
      - name: rabbitmq
        image: rabbitmq:latest
        env:
          - name: RABBITMQ_DEFAULT_USER
            value: "admin"
          - name: RABBITMQ_DEFAULT_PASS
            value: "A1dmin@23*Eco"
        ports:
          - containerPort: 5672
            name: amqp
          - containerPort: 15672
            name: management

# rabbitmq service
---
apiVersion: v1
kind: Service
metadata:
  name: rabbitmq-service
spec:
  selector:
    app: rabbitmq
  ports:
    - protocol: TCP
      port: 5672
      targetPort: 5672
      name: amqp
    - protocol: TCP
      port: 15672
      targetPort: 15672
      name: management
  type: ClusterIP

# redis
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: redis
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis:latest
        ports:
        - containerPort: 6379

# redis service
---
apiVersion: v1
kind: Service
metadata:
  name: redis-service
spec:
  selector:
    app: redis
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379