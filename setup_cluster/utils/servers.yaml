# routing-engine server
apiVersion: apps/v1
kind: Deployment
metadata:
  name: routing-engine-server-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: routing-engine-server
  template:
    metadata:
      labels:
        app: routing-engine-server
    spec:
      containers:
      - name: routing-engine-server-container
        image: sakshidhingra/map-engine:24-03-2024
        imagePullPolicy: Always
        ports:
        - containerPort: 8080

# api-server
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:  api-server-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: api-server
  template:
    metadata:
      labels:
        app: api-server
    spec:
      containers:
      - name: api-server-container
        image: sakshidhingra/map-api:24-03-2024
        imagePullPolicy: Always
        env:
          - name: POSTGRES_HOST_NAME
            value: "10.10.0.3"
          - name: POSTGRES_PORT
            value: "8086"
          - name: POSTGRES_DATABASE
            value: "postgres"
          - name: POSTGRES_USER
            value: "pastav"
          - name: POSTGRES_PASSWORD
            value: "Eco@123#24Postgres"
          - name: JWT_SECRET_KEY
            value: "ASE123Ecocompass@JWT"
          - name: JWT_ACCESS_TOKEN_EXPIRE_HOURS
            value: "1"
          - name: REDIS_HOST_NAME
            value: "10.10.0.3"
          - name: REDIS_PORT
            value: "6379"
          - name: REDIS_DATABASE
            value: "0"
          - name: REDIS_PASSWORD
            value: "Eco@123#24Redis"
        ports:
        - containerPort: 6969

---
apiVersion: v1
kind: Pod
metadata:
  name: test-pod-1
spec:
  containers:
    - name: test-container-1
      image: ubuntu:22.04
      command: ["sleep", "infinity"]

---
# link api-server pods with routing-engine-server pods using service
apiVersion: v1
kind: Service
metadata:
  name: routing-engine-service
spec:
  type: ClusterIP
  selector:
    app: routing-engine-server
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8080

# nodePort service to expose routing-engine-servers on public IP
---
apiVersion: v1
kind: Service
metadata:
  name: external-service
spec:
  type: NodePort
  selector:
    app: api-server
  ports:
    - name: http
      protocol: TCP
      port: 8080
      targetPort: 6969
      nodePort: 30000
